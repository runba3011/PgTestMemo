・スペースの位置がバラバラ。フォーマットすること。
・メソッド分けを行うこと。
★警告は出ないようにしよう
・無限ループは良くない…上限の回数は決めておこう
・条件は窓口が狭い方を条件とする。
	if文は基本正を最初に持ってくる
	コーディング規約に気を付けること
	◆ループを抜けるタイミング第１で考えると、場合によって条件が違う、というのが起きてしまう
		→条件を統一するために
・エラーがわかっているならその種類を特定すること
・ScannerはhasNext...で入力したものが特定の方であることを確認できる
・入力は基本try-catchを使う

◆関数名通りの動作になっていないことがよくある･･･注意
◆メソッドにはjavadocのコメントを使用しよう
・共通のものがあるとしても…不要なものは消しておこう
・メソッド名と実際の処理の内容が異なっている(特にBoolに注意)
・警告は表示されるようにしよう
・外で作った値をクラスの引数に…というよりコンストラクタ内で作成するほうが良い
	（クラスの中の値はクラスの中で極力作る）
・ネストクラスはプライベートにしておくとよい(ほかのところからは使用されないため)
◆アクセス修飾子を適切に使うようにしよう
◆配列を使うときには範囲外アクセスが起きないように注意
◆大きい順に撮りたい倍について
	ソートして最初から順番に…というように

◆列挙型は大文字スタートに

◆列挙型の中身はprivateにする。変えることができてしまう

◆理由がない限りプリミティブ型以外は使わない
	プリミティブ型：int
	プリミティブ型でない：Integer

◆文字列の結合は基本String.formatを使うこと
	+=は基本使わない。クラスのくせに不変
	とくにループを回して+=は特にしないこと。
	
◆staticが多いのは望ましくない
	メインメソッドは基本外部に切り出す。

◆リストの要素を全削除したいだけならclearでよい

★リストが空の時の対応は必ず行うこと
	エラーチェック

◆フラグによって処理の内容が違う、というのは望ましくない

◆2行以上改行しない

◆変数名、メソッド名でmoveよりもactionのほうが望ましい(moveだと移動、というようになってしまう）
	→下記を活用すること（https://codic.jp/engine）

◆リストを作る処理はあまりやらないこと、重たい

★パフォーマンスを意識した実装をすること

◆enum.ordinalは使わないほうがいい、どうしても使いたい場合はenumの(1)...のようにして紐づけられるようにする

◆ArrayListのコピーは、new ...()に格納するのみでよい

◆同じ情報を持った複数の配列で管理するというのはあまりしないほうがいい

◆比較する処理は変数を左に、定数を右にする

◆正常系を一番上にする。流れに違和感があるのであれば関数でtrue falseを返すよう

◆持たなくてよいプロパティは持たなくてよい

◆インターフェースを使ってみよう

◆Listに対して何かするときにはStream

◆コメントの書き方

◆ゲッター、セッターで特殊処理があるならばコメントに



─────────────────

初級PG認定試験対策

SQL関係のやつ
docker desktopを起動する

Containersに使用するものが表示されていない場合
	powershellを起動する
	docker-compose.ymlが格納されているフォルダパスへ移動する
	下記のコマンドを実行する
		docker-compose up -d
	→Containerに追加される。startする。

A5SQL Mk-2を実行する
	右下の起動 をクリックする
	開いた画面にて 右側の データベース を右クリックし、データベースの追加と削除 をクリックする
	開いたウィンドウで左下の追加をクリックする
	.env を参考にし、ホスト名、ポート番号、ユーザーID、パスワード、データベースを入力する。
	データベース のコンボボックスに対象のものが表示されていなくても直接入力すれば操作可能。

VisualStudio側
	少なくとも練習問題では、VisualStudio Codeで開くパスが間違っていると
	練習問題のものを使用してアクセスできないことを確認した。
	シーケンス図の通りにやっていてもアクセスできないときにはここを疑うこと。

─────────────────

★口座の誤字
★クラス図にフィールド名の指定があるので、それに従う必要があります
★Javadocにthrowsの記載がない
★ラベル機能は禁止している案件先もあるので注意が必要です
★コメントの意図はなんでしょうか？
★printとformatを別々で使わなくても
★elseの改行のタイミングを統一しましょう
★他にもありましたが、試験時はこのような説明的なコメントは入れません
★printfメソッドを使いましょう
★もう少し改行を使いましょう
★TRANSACTION_SEPARATOR_STARTとTRANSACTION_SEPARATOR_ENDを呼び出し元で出力すると
★１行が長いと条件が理解しずらくなります
★早期returnを使った例
★一時変数を活用した例

つまるところ…
・誤字に注意
・クラス図のフィールド名に合わせよう
・JavaDocに記載するものは十分か？
・printfを使おう
・説明のようなコメントは不要
・インデントが深くなりそうなときには早期returnを使う
・１行が長くなりそうなときには一時変数を使用する

─────────────────

試験仕様書
・境界値試験は-1,正常値、+1をやるようにする
-1000,+1000のように大きすぎるものを使用しないようにすること

・メニューについての試験を行う の場合、メニューについての試験を行う
　メニューから別の機能を実行し、終了したら元の動作が行われることを確認する…の場合
　別の機能については試験対象外とし、戻ってくるところも確認する必要がある




































